# Sunil Mehta's Udacity Project 5 
version: 2.1

commands:
  # Exercise - Delete image from docker hub
  delete-image:
    description: This command deletes the docker image from docker hub
    steps:
      - run:
          name: delete image
          when: on_fail
          command: |
            echo "deleting image"
            docker run --rm -it mrsunilmehta/project5:latest -u ${DOCKER_USER} -p ${DOCKER_PWD}

orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.11.2

executors:
  python:
    docker:
      - image: circleci/python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

jobs:
  install:
    executor: python
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install libuv1.dev
            sudo apt-get install python3-venv
            python3 -m venv virtualenv
            . virtualenv/bin/activate
            make install
            make env
      - save_cache:
          paths:
            - ./virtualenv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      
      - run:
          name: run lint
          command: |
            . virtualenv/bin/activate
            make lint

  push-image:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          # Build, tag and push my docker image to docker hub
          name: Push my docker image to docker hub
          command: |
            # Define Docker user name and password as env  variables in circleci          
            docker login -u ${DOCKER_USER} -p ${DOCKER_PWD}
            # Build docker image                       
            docker build -t mrsunilmehta/project5:${CIRCLE_WORKFLOW_ID:0:5} .
            # Tag image before pushing
            docker tag mrsunilmehta/project5:${CIRCLE_WORKFLOW_ID:0:5} mrsunilmehta/project5:latest
            # Push to docker hub            
            docker push mrsunilmehta/project5:latest            
      # Here's where you will add some code to rollback on failure
      - delete-image      


  create-deployment:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          gsvcapstone
        type: string
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "deployment/project5-app-deployment.yml"
          resource-name: deployment/sunilapp
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/project5-lb.yml"
          resource-name: deployment/sunilapp           

  delete-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          deleting EKS cluster
        type: string
    steps:
      - run:
          name: Delete EKS and stack
          # Add when this will run
          when: on_fail
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download
      - aws-eks/delete-cluster:
          cluster-name: << parameters.cluster-name >>
          aws-region: ${AWS_DEFAULT_REGION}
          wait: true     
      # delete image as well
      # - delete-image 


  create-eks-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - run:
          name: Install the eksctl tool
          command: |
            if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download

  deploy-app:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
          aws-region: ${AWS_DEFAULT_REGION}
      
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: "deployment/project5-app-deployment.yml"
          resource-name: deployment/sunilapp
      - run:
          name: Test cluster 1
          command: |
            # some time for creation
            sleep 5
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
            kubectl get pods -o wide      
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/project5-lb.yml"
          resource-name: deployment/sunilapp          
      - run:
          name: Test cluster 2
          command: |
            # some time for creation
            sleep 5
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
            kubectl get pods -o wide
      # Here's where you will add some code to rollback on failure
      #- delete-cluster:
      #    cluster-name: sunil-eks-cluster             


  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Testing EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          name: Test cluster
          command: |
            kubectl get svc
            kubectl get nodes
            kubectl get deployment                      
                   

workflows:
  deployment:
    jobs:
      - install
      - create-eks-cluster
      - push-image:
          requires:
            - install      
      - aws-eks/create-cluster:
          cluster-name: sunil-eks-cluster   
          requires:          
            - create-eks-cluster
      - create-deployment:
          cluster-name: sunil-eks-cluster
          requires:
            - aws-eks/create-cluster                    
      - aws-eks/update-container-image:
          cluster-name: sunil-eks-cluster
          container-image-updates: project5=mrsunilmehta/project5
          post-steps:
              - kubernetes/delete-resource:
                  resource-names: sunil-eks-cluster
                  resource-types: deployment
                  wait: true
          record: true
          requires:
              - create-deployment
          resource-name: deployment/sunilapp
      - test-cluster:
          cluster-name: sunil-eks-cluster
          requires:
            - aws-eks/update-container-image
      - aws-eks/delete-cluster:
          cluster-name: sunil-eks-cluster
          requires:
            - test-cluster